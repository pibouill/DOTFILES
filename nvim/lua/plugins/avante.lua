-- ************************************************************************** --
--                                                                            --
--                                                        :::      ::::::::   --
--   avante.lua                                         :+:      :+:    :+:   --
--                                                    +:+ +:+         +:+     --
--   By: pibouill <pibouill@student.42prague.com>   +#+  +:+       +#+        --
--                                                +#+#+#+#+#+   +#+           --
--   Created: 2024/12/13 08:19:00 by pibouill          #+#    #+#             --
--   Updated: 2024/12/13 08:20:16 by pibouill         ###   ########.fr       --
--                                                                            --
-- ************************************************************************** --

-- avante.nvim is a Neovim plugin designed to emulate the behaviour
--	of the Cursor AI IDE.
-- It provides users with AI-driven code suggestions
-- and the ability to apply these recommendations directly to their
--	source files with minimal effort.

-- NOT USING FOR NOW

-- return {
--   "yetone/avante.nvim",
--   event = "VeryLazy",
--   lazy = false,
--   version = false, -- set this if you want to always pull the latest change
--   opts = {
--     -- add any opts here
--     debug = false,
--     provider = "claude", -- Only recommend using Claude
--     auto_suggestions_provider = "claude",
--     tokenizer = "tiktoken",
--     openai = {
--       endpoint = "https://api.openai.com/v1",
--       model = "gpt-4o",
--       timeout = 30000, -- Timeout in milliseconds
--       temperature = 0,
--       max_tokens = 4096,
--     },
--     copilot = {
--       endpoint = "https://api.githubcopilot.com",
--       model = "gpt-4o-2024-08-06",
--       proxy = nil, -- [protocol://]host[:port] Use this proxy
--       allow_insecure = false, -- Allow insecure server connections
--       timeout = 30000, -- Timeout in milliseconds
--       temperature = 0,
--       max_tokens = 4096,
--     },
--     azure = {
--       endpoint = "", -- example: "https://<your-resource-name>.openai.azure.com"
--       deployment = "", -- Azure deployment name (e.g., "gpt-4o", "my-gpt-4o-deployment")
--       api_version = "2024-06-01",
--       timeout = 30000, -- Timeout in milliseconds
--       temperature = 0,
--       max_tokens = 4096,
--     },
--     gemini = {
--       endpoint = "https://generativelanguage.googleapis.com/v1beta/models",
--       model = "gemini-1.5-flash-latest",
--       timeout = 30000, -- Timeout in milliseconds
--       temperature = 0,
--       max_tokens = 4096,
--     },
--     vertex = {
--       endpoint = "https://LOCATION-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/publishers/google/models",
--       model = "gemini-1.5-flash-latest",
--       timeout = 30000, -- Timeout in milliseconds
--       temperature = 0,
--       max_tokens = 4096,
--     },
--     cohere = {
--       endpoint = "https://api.cohere.com/v2",
--       model = "command-r-plus-08-2024",
--       timeout = 30000, -- Timeout in milliseconds
--       temperature = 0,
--       max_tokens = 4096,
--     },
--     vendors = {
--       ["claude-haiku"] = {
--         __inherited_from = "claude",
--         model = "claude-3-5-haiku-20241022",
--         timeout = 30000, -- Timeout in milliseconds
--         temperature = 0,
--         max_tokens = 8000,
--       },
--       ["claude-opus"] = {
--         __inherited_from = "claude",
--         model = "claude-3-opus-20240229",
--         timeout = 30000, -- Timeout in milliseconds
--         temperature = 0,
--         max_tokens = 8000,
--       },
--     },
--     dual_boost = {
--       enabled = false,
--       first_provider = "openai",
--       second_provider = "claude",
--       prompt = "Based on the two reference outputs below, generate a response that incorporates elements from both but reflects your own judgment and unique perspective. Do not provide any explanation, just give the response directly. Reference Output 1: [{{provider1_output}}], Reference Output 2: [{{provider2_output}}]",
--       timeout = 60000, -- Timeout in milliseconds
--     },
--     behaviour = {
--       auto_suggestions = false, -- Experimental stage
--       auto_set_highlight_group = true,
--       auto_set_keymaps = true,
--       auto_apply_diff_after_generation = false,
--       support_paste_from_clipboard = false,
--       minimize_diff = true,
--     },
--     history = {
--       max_tokens = 4096,
--       storage_path = vim.fn.stdpath("state") .. "/avante",
--       paste = {
--         extension = "png",
--         filename = "pasted-%Y-%m-%d-%H-%M-%S",
--       },
--     },
--     highlights = {
--       diff = {
--         current = "DiffText",
--         incoming = "DiffAdd",
--       },
--     },
--     mappings = {
--       diff = {
--         ours = "co",
--         theirs = "ct",
--         all_theirs = "ca",
--         both = "cb",
--         cursor = "cc",
--         next = "]x",
--         prev = "[x",
--       },
--       suggestion = {
--         accept = "<M-l>",
--         next = "<M-]>",
--         prev = "<M-[>",
--         dismiss = "<C-]>",
--       },
--       jump = {
--         next = "]]",
--         prev = "[[",
--       },
--       submit = {
--         normal = "<CR>",
--         insert = "<C-s>",
--       },
--       ask = "<leader>aa",
--       edit = "<leader>ae",
--       refresh = "<leader>ar",
--       focus = "<leader>af",
--       toggle = {
--         default = "<leader>at",
--         debug = "<leader>ad",
--         hint = "<leader>ah",
--         suggestion = "<leader>as",
--         repomap = "<leader>aR",
--       },
--       sidebar = {
--         apply_all = "A",
--         apply_cursor = "a",
--         switch_windows = "<Tab>",
--         reverse_switch_windows = "<S-Tab>",
--         remove_file = "d",
--         add_file = "@",
--       },
--     },
--     windows = {
--       position = "right",
--       wrap = true,
--       width = 30,
--       height = 30,
--       sidebar_header = {
--         enabled = true,
--         align = "center",
--         rounded = true,
--       },
--       input = {
--         prefix = "> ",
--         height = 8,
--       },
--       edit = {
--         border = "rounded",
--         start_insert = true,
--       },
--       ask = {
--         floating = false,
--         border = "rounded",
--         start_insert = true,
--         focus_on_apply = "ours",
--       },
--     },
--     diff = {
--       autojump = true,
--       override_timeoutlen = 500,
--     },
--     hints = {
--       enabled = true,
--     },
--     repo_map = {
--       ignore_patterns = { "%.git", "%.worktree", "__pycache__", "node_modules" },
--       negate_patterns = {},
--     },
--   },
--   build = "make",
--   dependencies = {
--     "stevearc/dressing.nvim",
--     "nvim-lua/plenary.nvim",
--     "MunifTanjim/nui.nvim",
--     "hrsh7th/nvim-cmp",
--     "nvim-tree/nvim-web-devicons",
--     "zbirenbaum/copilot.lua",
--     {
--       "HakonHarnes/img-clip.nvim",
--       event = "VeryLazy",
--       opts = {
--         default = {
--           embed_image_as_base64 = false,
--           prompt_for_file_name = false,
--           drag_and_drop = {
--             insert_mode = true,
--           },
--           use_absolute_path = true,
--         },
--       },
--     },
--     {
--       'MeanderingProgrammer/render-markdown.nvim',
--       opts = {
--         file_types = { "markdown", "Avante" },
--       },
--       ft = { "markdown", "Avante" },
--     },
--   },
-- }
